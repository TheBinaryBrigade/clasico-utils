import fs from "fs";
import doc, { BuiltinDoc, BuiltinExample } from "./src/eval/doc";

const writeFile = (filename: string, content: string) => {
    fs.writeFile(filename, content, (err) => {
        if (err) {
            return console.log("ERROR:", err);
        }
        console.log("INFO: Wrote content to", filename);
    });
};

const readFile = (filename: string) => {
    return fs.readFileSync(filename, { encoding: "utf-8" });
};


type WrapCodeLang = "js" | "python" | "ts" | "json";

type WrapCode = {
    content: string,
    lang?: WrapCodeLang,
    wrap?: "```" | "`",
};

type WrapCodeFn = (_: WrapCode) => string;

const wrapCode: WrapCodeFn = ({content, lang = "", wrap = "```" }) => {
    const nl = wrap === "```" ? "\n" : "";
    if (!lang) {
        lang = "";
    }
    return wrap + lang + nl + nl + content + nl + nl + wrap;
};

const inlineCode = (content: string) => {
    return wrapCode({content, wrap: '`'});
};

const blockCode = (content: string, lang?: WrapCodeLang) => {
    return wrapCode({content, lang, wrap: '```'});
};

const examplesView = (examples: BuiltinExample[]) => {

    return examples
        .map(({ input: { text, context }, output, notes}, idx) => {
            return [
                "#### No." + (idx + 1).toString(),
                "\n\n",
                "Input: " + inlineCode(text) + "<br />",
                "Output: " + inlineCode(output) + "<br />" + "\n\n",
                (context ? "\nContext: \n" + inlineCode(JSON.stringify(context, null, 4)) : ""),
                // notes ? "\nNotes: \n\n1. " + notes.join("\n1. ") : "",
                "\n---\n"

            ].join('\n');

        })
        .join('\n');
};

const createCollapsable = (key: string, doc: BuiltinDoc) => {

    // HEAD ------------------------------------------------
    const head = `
### ${inlineCode(key)} ${doc.isDeprecated ? '**[DEPRECATED]**' : ''}

${doc.description}
    `.trim();
 
    // EXAMPLES ------------------------------------------------
    const examples = doc.examples ? `
<details>
<summary>Examples</summary>

${examplesView(doc.examples)}

</details>
        ` : '';

    // IMPL ------------------------------------------------
//     const implementation = doc.implementation ? `
// <details>
// <summary>Implementation</summary>

// \t${blockCode(doc.implementation, 'ts')}

// </details>
//     `.trim() : '';

    // END  ------------------------------------------------
    return `
${head}

${examples}
    `.trim();
};

// Inject Readme
const readmeTemplateFilename = "README.template.md";
const targetReadme = "README.md";
const evalReadme = "src/eval/README.md";

const readmeKey = "{{HELPER_FUNCTIONS_DOCS}}";
const readmeWarn = "<!-- THIS FILE IS @autogenerated DO NOT EDIT -->";

const helperDocs = Object
    .entries(doc)
    .map(([key, example]) => createCollapsable(key, example))
    .join('\n\n');

writeFile(evalReadme, readmeWarn + "\n\n" + helperDocs);

const readmet = readFile(readmeTemplateFilename).replace(readmeKey, helperDocs);
writeFile(targetReadme, readmeWarn + "\n\n" + readmet)